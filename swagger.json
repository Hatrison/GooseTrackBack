{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "GooseTrack",
    "description": "API documentation for project GooseTrack"
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [
    { "url": "https://goosetrack-0ajq.onrender.com" },
    { "url": "http://localhost:3000" }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User data endpoints"
    },
    {
      "name": "Reviews",
      "description": "Reviews endpoints"
    },
    {
      "name": "Task",
      "description": "Tasks endpoints"
    }
  ],

  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],

        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          },
          "409": {
            "description": "Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409Response"
                }
              }
            }
          }
        }
      }
    },

    "/api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],

        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "401": {
            "description": "Email or password is wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          }
        }
      }
    },

    "/api/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],

        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401LogoutResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get current user information",
        "parameters": [],
        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["User"],
        "summary": "User's update",
        "parameters": [],
        "security": [{ "Bearer": [] }],

        "requestBody": {
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          },
          "409": {
            "description": "Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409Response"
                }
              }
            }
          }
        }
      }
    },
    "/api/reviews": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get all reviews",
        "parameters": [],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllReviews"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          }
        }
      }
    },
    "/api/reviews/own": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get own review",
        "parameters": [],
        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOwnReview"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },

          "404": {
            "description": "No review",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404OwnReviewResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Reviews"],
        "summary": "Make own review",
        "parameters": [],
        "security": [{ "Bearer": [] }],

        "requestBody": {
          "description": "Review's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnReviewRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnReviewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Reviews"],
        "summary": "Update own review",
        "parameters": [],
        "security": [{ "Bearer": [] }],

        "requestBody": {
          "description": "Review's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOwnReviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateOwnReviewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Reviews"],
        "summary": "Remove own review",
        "parameters": [],
        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateOwnReviewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks": {
      "get": {
        "tags": ["Task"],
        "summary": "Get all user's tasks",
        "parameters": [],
        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTask"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Task"],
        "summary": "Make task",
        "parameters": [],
        "security": [{ "Bearer": [] }],

        "requestBody": {
          "description": "Task's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/{taskId}": {
      "patch": {
        "tags": ["Task"],
        "summary": "Update task",
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string",
            "description": "Task id"
          }
        ],
        "security": [{ "Bearer": [] }],

        "requestBody": {
          "description": "Update task's object",

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Task"],
        "summary": "Remove task",
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string",
            "description": "Task id"
          }
        ],
        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bill"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user@mail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user@mail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty"
          }
        }
      },
      "UserData": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User's id",
            "example": "64d74b74a5e4c755ff4eef2a"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bill"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "user@mail.com"
          },
          "birthday": {
            "type": "string",
            "description": "User's date of birth",
            "example": "DD/MM/YYYY"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number",
            "example": "38 (000) 000 00 00"
          },
          "skype": {
            "type": "string",
            "description": "User's skype address",
            "example": "Add skype number"
          },
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDc0Yjc0YTVlNGM3NTVmZjRlZWYyYSIsImlhdCI6MTY5MTgzMTE1NiwiZXhwIjoxNjkxOTEzOTU2fQ.ntaqs4gqv9-eQSDX-Y9ImeO0lYjx9iOWK6GyisCQudg"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar URL-adderss",
            "example": "//www.gravatar.com/avatar/21add07c66904d761c038cdcf79b558a?s=100&r=x&d=retro"
          },
          "theme": {
            "type": "string",
            "description": "User's theme type",
            "example": "light"
          },
          "createdAt": {
            "type": "string",
            "description": "Created date",
            "example": "2023-08-12T09:05:56.396Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Update date",
            "example": "2023-08-12T09:05:56.502Z"
          }
        }
      },
      "ChangeUserData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Jhon"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "friend@mail.com"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number",
            "example": "38 (097) 123 45 67"
          },
          "skype": {
            "type": "string",
            "description": "User's skype address",
            "example": "qwerty-qwerty"
          },
          "birthday": {
            "type": "string",
            "description": "User's date of birth",
            "example": "21/01/2020"
          },
          "theme": {
            "type": "string",
            "description": "User's theme type",
            "example": "darck"
          }
        }
      },
      "GetAllReviews": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "User's id",
              "example": "64d74b74a5e4c755ff4eef2a"
            },
            "name": {
              "type": "string",
              "description": "User's name",
              "example": "Bill"
            },
            "ownerId": {
              "type": "string",
              "description": "User's own id",
              "example": "64d47b31ebfbf85460caf8db"
            },
            "text": {
              "type": "string",
              "description": "Reviews text",
              "example": "Sample feedback"
            },
            "rating": {
              "type": "integer",
              "description": "Rating assessment",
              "example": 4
            },
            "createdAt": {
              "type": "string",
              "description": "Created date",
              "example": "2023-08-12T09:05:56.396Z"
            },
            "updatedAt": {
              "type": "string",
              "description": "Update date",
              "example": "2023-08-12T09:05:56.502Z"
            }
          }
        }
      },
      "GetOwnReview": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bill"
          },
          "text": {
            "type": "string",
            "description": "Reviews text",
            "example": "Sample feedback"
          },
          "rating": {
            "type": "integer",
            "description": "Rating assessment",
            "example": 4
          }
        }
      },
      "OwnReviewRequest": {
        "type": "object",
        "required": ["name", "text", "ratirg"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bill"
          },
          "text": {
            "type": "string",
            "description": "Reviews text",
            "example": "Sample feedback"
          },
          "rating": {
            "type": "integer",
            "description": "Rating assessment",
            "example": 4
          }
        }
      },
      "OwnReviewResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bill"
          },
          "ownerId": {
            "type": "string",
            "description": "User's own id",
            "example": "64d47b31ebfbf85460caf8db"
          },
          "text": {
            "type": "string",
            "description": "Reviews text",
            "example": "Sample feedback"
          },
          "rating": {
            "type": "integer",
            "description": "Rating assessment",
            "example": 4
          },
          "_id": {
            "type": "string",
            "description": "User's id",
            "example": "64d74b74a5e4c755ff4eef2a"
          },
          "createdAt": {
            "type": "string",
            "description": "Created date",
            "example": "2023-08-12T09:05:56.396Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Update date",
            "example": "2023-08-12T09:05:56.502Z"
          }
        }
      },
      "UpdateOwnReviewRequest": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Updated reviews text",
            "example": "Updated sample feedback"
          },
          "rating": {
            "type": "integer",
            "description": "Updated rating assessment",
            "example": 4
          }
        }
      },
      "UpdateOwnReviewResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User's id",
            "example": "64d74b74a5e4c755ff4eef2a"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bill"
          },
          "ownerId": {
            "type": "string",
            "description": "User's own id",
            "example": "64d47b31ebfbf85460caf8db"
          },
          "text": {
            "type": "string",
            "description": "Reviews text",
            "example": "Sample feedback"
          },
          "rating": {
            "type": "integer",
            "description": "Rating assessment",
            "example": 4
          },
          "createdAt": {
            "type": "string",
            "description": "Created date",
            "example": "2023-08-12T09:05:56.396Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Update date",
            "example": "2023-08-13T11:51:28.340Z"
          }
        }
      },
      "GetAllTask": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TasksResponse"
        }
      },
      "TaskRequest": {
        "type": "object",
        "required": ["title", "start", "end", "date", "category", "priority"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Task text",
            "example": "work in garden"
          },
          "start": {
            "type": "string",
            "description": "Start time",
            "example": "15:15"
          },
          "end": {
            "type": "string",
            "description": "End time",
            "example": "15:45"
          },
          "date": {
            "type": "string",
            "description": "Date",
            "example": "2024-06-14"
          },
          "category": {
            "type": "string",
            "description": "Category",
            "example": "done"
          },
          "priority": {
            "type": "string",
            "description": "Priority",
            "example": "medium"
          }
        }
      },
      "TasksResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User's id",
            "example": "64d74b74a5e4c755ff4eef2a"
          },
          "title": {
            "type": "string",
            "description": "Task text",
            "example": "work in garden"
          },
          "start": {
            "type": "string",
            "description": "Start time",
            "example": "15:15"
          },
          "end": {
            "type": "string",
            "description": "End time",
            "example": "15:45"
          },
          "priority": {
            "type": "string",
            "description": "Priority",
            "example": "medium"
          },
          "date": {
            "type": "string",
            "description": "Date",
            "example": "2023-06-14T00:00:00.000+00:00"
          },
          "category": {
            "type": "string",
            "description": "Category",
            "example": "done"
          },
          "owner": {
            "type": "string",
            "description": "User's own id",
            "example": "64d47b31ebfbf85460caf8db"
          }
        }
      },
      "UpdateTaskRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Task text",
            "example": "work in garden"
          },
          "start": {
            "type": "string",
            "description": "Start time",
            "example": "15:15"
          },
          "end": {
            "type": "string",
            "description": "End time",
            "example": "15:45"
          },
          "date": {
            "type": "string",
            "description": "Date",
            "example": "2024-06-14"
          },
          "category": {
            "type": "string",
            "description": "Category",
            "example": "done"
          },
          "priority": {
            "type": "string",
            "description": "Priority",
            "example": "medium"
          }
        }
      },
      "TasksDeleteResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Task deleted"
          }
        }
      },
      "Error400Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Bad request"
          }
        }
      },
      "Error401Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Email or password is wrong"
          }
        }
      },
      "Error401LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Not Authorized"
          }
        }
      },
      "Error404Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Not found"
          }
        }
      },
      "Error404OwnReviewResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "You have no review"
          }
        }
      },
      "Error409Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Email in use"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
